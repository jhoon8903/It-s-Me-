// 📃 상. 상하좌우 큰 수 찾기

// </aside>

// 5x5 2차원 배열이 주어질 때 어떤 원소가 상하좌우에 있는 원소보다 클 때 해당 위치에 * 을 표시하는 프로그램을 작성하세요. 경계선에 있는 수는 상하좌우 중 존재하는 원소만을 비교합니다.



// [[3,4,1,4,9],                        3 4 1 4 *
//  [2,9,4,5,8],                        2 * 4 5 8
//  [9,0,8,2,1],                        * 0 * 2 1
//  [7,0,2,8,4],                        7 0 2 * 4
//  [2,7,2,1,4]]                        2 * 2 1 4


let arr = [[3,4,1,4,9],[2,9,4,5,8],[9,0,8,2,1],[7,0,2,8,4],[2,7,2,1,4]]

function solution(arr){
let n = arr.length
// 현 위치에서의 상하좌우를 비교해야함, 상하좌우 행과 열을 좌표로 만듬, 시계방향 [상,우,하,좌]
let col = [-1,0,1,0]    // 열 이동 설정. 좌표점을 기준으로 상은 -1, 하는 +1 
let row = [0,1,0,-1]    // 행 이동 설정. 좌표점을 기준으로 우는 +1, 좌는 -1

for (let i = 0; i <n; i++){ // 열 n 만큼 반복 확인 
    for (let j = 0; j<n; j++){ // 행 n 만큼 반복 확인
        hiNum = true        ////// 예외처리 되지않은 값은 true로 계산을 이어 나간다.
        
        for (let k = 0; k<4; k++) {     // 상하좌우 인덱스의 4방향확인 
            let colDy = i + col[k];     // i가 반복될 때 열 이동되는 좌표
            let rowDx = j + row[k];     // j가 반복될 때 행 이동되는 좌표
           
        ////////////////////////// 예외처리 'ReferenceError' ////////////////////////////////////////////
            if (colDy >=0 && colDy < n && rowDx >=0 && rowDx < n && arr[colDy][rowDx] >= arr[i][j]) {
               //행 그리고 열에서 0 보다 작거나 5 보다 큰것은 반복에서 제외한다.//
                
                hiNum = false    ////// 예외처리 된 값은 false로 계산을 중지한다.
                
                break  ///// 예외처리되면 기능을 정지한다.
            }
        ////////////////////////// 예외처리 'ReferenceError' ////////////////////////////////////////////////
        }
        if(hiNum) {arr[i][j]='*'}     /// 높은 숫자에는 *을 찍는다.
}       
} 
////////////////////// * 찍는 과정 ///////////////////////////
let result = ''
for (let i =0; i <5; i++){
    for (let j =0; j< 5; j++){
        result += arr[i][j]
        result += ' '
    }
    result += '\n'
}
///////////////////  * 찍는 과정   ////////////////////////////
return result.slice(0,-1)
}
console.log(solution(arr))




                                                                    